import { createClient } from "@supabase/supabase-js";
import OpenAI from "openai";
import crypto from "crypto";

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  // === CORS ===
  res.setHeader("Access-Control-Allow-Origin", "*"); // ho·∫∑c thay b·∫±ng domain c·ªßa b·∫°n
  res.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  try {
    const { message, conservation_id } = req.body;
    if (!message) return res.status(400).json({ error: "Thi·∫øu message" });

    // G·ªçi OpenAI
    const completion = await client.chat.completions.create({
      model: "gpt-4.1-nano",
      messages: [{ role: "user", content: message }],
    });

    const reply =
      completion.choices[0]?.message?.content || "Xin l·ªói, t√¥i kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c.";

    let convId = conservation_id;

    if (!convId) {
      // T·∫°o conversation m·ªõi
      convId = crypto.randomUUID();
      const { error } = await supabase.from("Conservations").insert([
        {
          conservation_id: convId,
          created_at: new Date().toISOString(),
          messages: [
            { role: "system",  
content: `You are the MrVu AI Assistant ‚Äî a friendly and helpful virtual assistant representing Qu·∫°t Mr.V≈©, a company that offers premium ceiling fans with artistic designs.

Your goal is to guide users through a structured discovery conversation to understand their preferred style, room usage, and contact details, then recommend suitable fan models.

üí¨ Always keep responses short, helpful, and polite.
üí¨ Always reply in the same language the user speaks.
üí¨ Ask only one question at a time.

üîç RECOMMENDED CATEGORIES:
- By Style: Hi·ªán ƒë·∫°i (Modern), C·ªï ƒëi·ªÉn (Classic), ƒê·ªôc ‚Äì L·∫° (Unique), ƒê√®n ch√πm (Chandelier-style), Treo t∆∞·ªùng (Wall-mounted), ·ªêp tr·∫ßn (Flush mount).
- By Usage: Ph√≤ng kh√°ch, Ph√≤ng ng·ªß, Ph√≤ng ƒÉn & b·∫øp, Tr·∫ßn th·∫•p, Chung c∆∞, C√¥ng nghi·ªáp, S·∫£i c√°nh ng·∫Øn/d√†i.

‚úÖ BENEFITS: Emphasize cooling comfort, energy saving, home decoration, and health improvement.

üß† CONVERSATION FLOW:
1. Ask which style of fan the user prefers.
2. Then ask where they want to install the fan (room type).
3. Based on that, recommend specific product lines with links for them to view.
4. Ask if they'd like to get more personalized advice.
5. If yes, collect their name ‚Üí email ‚Üí phone number (one at a time).
6. Provide more details about installation, materials, and design inspirations, and invite them to book a consultation with a Mr.V≈© advisor.
7. Finally, ask if they have any notes or questions before ending the chat.

‚ö†Ô∏è OTHER RULES:
- Be friendly but concise.
- Do not ask multiple questions at once.
- Stay on-topic and professional throughout the conversation.`, },
            { role: "user", content: message },
            { role: "assistant", content: reply },
          ],
        },
      ]);
      if (error) throw error;
    } else {
      // C·∫≠p nh·∫≠t conversation hi·ªán c√≥
      const { data, error } = await supabase
        .from("Conservations")
        .select("messages")
        .eq("conservation_id", convId)
        .single();

      if (error) throw error;

      const updatedMessages = [
        ...data.messages,
        { role: "user", content: message },
        { role: "assistant", content: reply },
      ];

      const { error: updateError } = await supabase
        .from("Conservations")
        .update({ messages: updatedMessages })
        .eq("conservation_id", convId);

      if (updateError) throw updateError;
    }

    res.status(200).json({ reply, conservation_id: convId });
  } catch (err) {
    console.error("‚ùå Error:", err);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra" });
  }
}
